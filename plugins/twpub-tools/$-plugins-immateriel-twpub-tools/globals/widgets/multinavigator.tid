title: $:/plugins/immateriel/twpub-tools/globals/widgets/$$multinavigator
tags: $:/tags/Macro
code-body: yes

<!--
Generic message handler that just passes messages onto the appropriate story river
-->
\procedure generic-message-handler()
<!-- Compute the story configuration tiddler -->
<$let
	storyConfigurationTiddler={{{ [<event-paramObject-storyConfigurationTiddler>!is[blank]] ~[{$:/config/PrimaryDefaultStoryRiver}tag[$:/tags/Story]] ~[all[shadows+tiddlers]tag[$:/tags/Story]!tag[$:/tags/HiddenStory]] }}}
>
	<$action-log message="In navigator generic-message-handler"/>
	<$action-log/>
	<!-- Invoke that method on the storyriver -->
	<$$invoke instanceTitle=<<storyConfigurationTiddler>> methodName=<<event-type>>/>
</$let>
\end

<!--
Traps navigate events within the story river
-->
\procedure tm-navigate-handler()
<$let
	event-paramObject-shiftKey=<<.getMessageParam shiftKey>> 
	event-paramObject-altKey=<<.getMessageParam altKey>> 
	event-paramObject-var-currentTiddler=<<.getMessageParam navigateTo>>
	defaultStoryConfigurationTiddler={{{ [<event-paramObject-var-currentTiddler>]  :cascade[all[shadows+tiddlers]tag[$:/tags/DefaultStoryFilter]get[text]] }}}
	storyConfigurationTiddler={{{ [<event-paramObject-storyConfigurationTiddler>!is[blank]] ~[<defaultStoryConfigurationTiddler>] }}}
	event-paramObject-navigateFromClientLeft=<<.getMessageParam navigateFromClientLeft>>
	event-paramObject-navigateFromClientTop=<<.getMessageParam navigateFromClientTop>>
	event-paramObject-navigateFromClientWidth=<<.getMessageParam navigateFromClientWidth>>
	event-paramObject-navigateFromClientHeight=<<.getMessageParam navigateFromClientHeight>>
>
	<$action-log message="In tm-navigate-handler"/>
	<$action-log/>
	<!-- If the shift key is not pressed, pass the navigation onto the current story river -->
	<$list filter="[<event-paramObject-shiftKey>!match[true]]" variable="ignore">
		<$$invoke instanceTitle=<<storyConfigurationTiddler>> methodName=<<event-type>>/>
	</$list>
	<!-- If the shift key is pressed, save all the context information and display the navigation popup -->
	<$list filter="[<event-paramObject-shiftKey>match[true]]" variable="ignore">
		<$let stateNavigationPopup={{{ [[$:/state/navigation-popup/]addsuffix<storyConfigurationTiddler>] }}}>
			<$action-setmultiplefields
				$tiddler=<<stateNavigationPopup>>
				$fields="[variables[]removeprefix[event-paramObject-]addprefix[var-]]"
				$values="[variables[]prefix[event-paramObject-]getvariable[]]"
			/>
			<$action-popup
				$state=<<stateNavigationPopup>>
				$coords=<<.makeRectangle navigateFromClientLeft navigateFromClientTop navigateFromClientWidth navigateFromClientHeight>>
			/>
			<$action-log
				$state=<<stateNavigationPopup>>
				$coords=<<.makeRectangle navigateFromClientLeft navigateFromClientTop navigateFromClientWidth navigateFromClientHeight>>
			/>
		</$let>
	</$list>
</$let>
\end

<!--
When we get a tm-import-tiddlers message, pass it up the parent, and navigate to the import tiddler
-->
\procedure tm-import-tiddlers-handler()
<$action-log message="In import-tiddlers-handler"/>
<$action-log/>
<$action-sendmessage $message="tm-import-tiddlers" $param=<<event-param>> importTitle=<<event-importTitle>>/>
<$let
	event-paramObject-var-currentTiddler={{{ [[event-importTitle]is[variable]then<event-importTitle>else[$:/Import]] }}}
	storyConfigurationTiddler={{{ [<event-paramObject-var-currentTiddler>]  :cascade[all[shadows+tiddlers]tag[$:/tags/DefaultStoryFilter]get[text]] }}}
>
<$action-log/>
	<$$invoke instanceTitle=<<storyConfigurationTiddler>> methodName="tm-navigate"/>
</$let>
\end

\procedure tm-delete-tiddler-handler()
<!--

Deletes the specified tiddler from all story rivers

event-tiddlerTitle: title of tiddler that is to be deleted

-->
\procedure delete-draft-tiddler()
<!-- Delete the draft tiddler -->
<$action-deletetiddler $tiddler={{{ [<title>field[draft.of]else<title>] }}}/>
\end delete-draft-tiddler
<$let
	title={{{ [<event-tiddlerTitle>!is[blank]else<event-paramObject-tiddlerTitle>] }}}
>
	<$action-log msg="In multinavigator tm-delete-tiddler-handler"/>
	<$action-log/>
	<!-- Check if the tiddler if this is a draft -->
	<$list filter="[<title>get[draft.of]is[tiddler]]" variable="originalTitle">
		<!-- If so, close the associated original tiddler in all story rivers -->
		<$list filter="[all[shadows+tiddlers]tag[$:/tags/Story]]" variable="storyConfigurationTiddler">
			<$$invoke instanceTitle=<<storyConfigurationTiddler>> methodName="tm-close-tiddler" event-tiddlerTitle=<<originalTitle>>/>
		</$list>
		<!-- Delete the original tiddler -->
		<$action-deletetiddler $tiddler=<<originalTitle>>/>
	</$list>
	<!-- Close the target tiddler in all story rivers -->
	<$list filter="[all[shadows+tiddlers]tag[$:/tags/Story]]" variable="storyConfigurationTiddler">
		<$$invoke instanceTitle=<<storyConfigurationTiddler>> methodName="tm-close-tiddler" event-tiddlerTitle=<<title>>/>
	</$list>
	<!-- Delete the target tiddler -->
	<$action-deletetiddler $tiddler=<<title>>/>
</$let>
\end

\widget $$multinavigator()
<!--
Define the $$multinavigator widget.

It handles tm-navigate and other storyriver-related messages by either dispatching the message to
the appropriate storyriver or by displaying a popup for the user to choose the target storyriver.
-->
<$let tv-action-refresh-policy="once">
	<$messagecatcher
		$tm-navigate=<<tm-navigate-handler>>
		$tm-close-tiddler=<<generic-message-handler>>
		$tm-edit-tiddler=<<generic-message-handler>>
		$tm-save-tiddler=<<generic-message-handler>>
		$tm-cancel-tiddler=<<generic-message-handler>>
		$tm-save-tiddler=<<generic-message-handler>>
		$tm-fold-tiddler=<<generic-message-handler>>
		$tm-delete-tiddler=<<tm-delete-tiddler-handler>>
		$tm-close-all-tiddlers=<<generic-message-handler>>
		$tm-close-other-tiddlers=<<generic-message-handler>>
		$tm-new-tiddler=<<generic-message-handler>>
		$tm-fold-tiddler=<<generic-message-handler>>
		$tm-fold-other-tiddlers=<<generic-message-handler>>
		$tm-fold-all-tiddlers=<<generic-message-handler>>
		$tm-unfold-all-tiddlers=<<generic-message-handler>>
		$tm-import-tiddlers=<<tm-import-tiddlers-handler>>
	>
		<$slot $name="ts-raw"/>
	</$messagecatcher>
</$let>
\end
