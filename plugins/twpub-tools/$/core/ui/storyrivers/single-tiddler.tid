caption: Single Tiddler Story River
imports: $:/core/ui/storyrivers/classic
title: $:/core/ui/storyrivers/single-tiddler
tags: $:/tags/StoryRiverDefinition
edit-template: $:/core/ui/storyrivers/classic-edit

\define tv-action-refresh-policy() always

\define tm-navigate()
<!--

Navigate to a tiddler

storyConfigurationTiddler: title of tiddler containing story configuration
event-paramObject-var-currentTiddler: title of tiddler that is target of navigation
event-navigateTo: alias for event-paramObject-var-currentTiddler for backwards compatibility
event-paramObject-* other optional variables to be provided to the story entry

-->
<$let
	event-paramObject-var-currentTiddler={{{ [<event-navigateTo>!is[blank]else<event-paramObject-var-currentTiddler>] }}}
>
	<$action-createtiddler $basetitle={{{ [[$:/state/storyitem/]addsuffix<storyConfigurationTiddler>] }}} var-currentTiddler=<<event-paramObject-var-currentTiddler>> var-anchor=<<event-paramObject-var-anchor>> var-creationFields=<<event-paramObject-var-creationFields>>>
		<$set name="value" filter="[<storyConfigurationTiddler>get[@history-list]enlist-input[]] =[<createTiddler-title>]">
			<$action-setfield $tiddler=<<storyConfigurationTiddler>> @history-list=<<value>>/>
		</$set>
		<$set name="value" filter="[<createTiddler-title>]">
			<$action-setfield $tiddler=<<storyConfigurationTiddler>> @story-list=<<value>>/>
		</$set>
	</$action-createtiddler>
</$let>
\end
