caption: Classic Story River
title: $:/core/ui/storyrivers/classic
tags: $:/tags/StoryRiverDefinition
edit-template: $:/core/ui/storyrivers/classic-edit

\define tv-action-refresh-policy() always

\procedure tm-navigate()
<!--

Navigate to a tiddler

storyConfigurationTiddler: title of tiddler containing story configuration
event-paramObject-var-currentTiddler: title of tiddler that is target of navigation
event-navigateTo: optional alias for event-paramObject-var-currentTiddler for backwards compatibility
event-paramObject-var-anchor: optional title of anchor within tiddler
event-paramObject-var-creationFields: optional JSON of field values for tiddlers created from missing links

-->
<$action-log message="In classic tm-navigate"/>
<$action-log/>
<$let 
	event-paramObject-var-currentTiddler={{{ [<event-navigateTo>!is[blank]else<event-paramObject-var-currentTiddler>] }}}
>
	<!-- Create the new story item tiddler -->
	<$action-createtiddler $basetitle={{{ [[$:/state/storyitem/]addsuffix<storyConfigurationTiddler>] }}} var-currentTiddler=<<event-paramObject-var-currentTiddler>> var-anchor=<<event-paramObject-var-anchor>> var-creationFields=<<event-paramObject-var-creationFields>>>
		<!-- Push it at the top of the history list -->
		<$set name="value" filter="[<storyConfigurationTiddler>get[@history-list]enlist-input[]] =[<createTiddler-title>]">
			<$action-setfield $tiddler=<<storyConfigurationTiddler>> @history-list=<<value>>/>
		</$set>
		<!-- Find any existing entry in the story that matches -->
		<$let
			storyPosition={{{ [<storyConfigurationTiddler>get[@story-list]enlist-input[]] :filter[<currentTiddler>get[var-currentTiddler]match<event-paramObject-var-currentTiddler>] }}}
		>
			<!-- If no match then add it to the end of the story list -->
			<$list filter="[<storyPosition>match[]]" variable="ignore">
				<$set name="value" filter="[<storyConfigurationTiddler>get[@story-list]enlist-input[]] [<createTiddler-title>]">
					<$action-setfield $tiddler=<<storyConfigurationTiddler>> @story-list=<<value>>/>
				</$set>
			</$list>
			<!-- If there is a match then replace the existing item in the story list-->
			<$list filter="[<storyPosition>!match[]]" variable="ignore">
				<$set name="value" filter="[<storyConfigurationTiddler>get[@story-list]enlist-input[]] [<createTiddler-title>] +[replace<storyPosition>]">
					<$action-setfield $tiddler=<<storyConfigurationTiddler>> @story-list=<<value>>/>
				</$set>
			</$list>
		</$let>
	</$action-createtiddler>
</$let>
\end

\procedure tm-new-tiddler()
<!--

Create a new tiddler in draft mode and navigate to it

storyConfigurationTiddler: title of tiddler containing story configuration
event-paramObject-*: fields to be applied to the new tiddler

-->
<$action-log message="In classic tm-new-tiddler"/>
<$action-log/>
<!-- Create the new tiddler -->
<$action-createtiddler
	$basetitle="New Tiddler"
	$timestamp="yes"
>
	<!-- Put it in edit mode -->
	<$let
		event-tiddlerTitle=<<createTiddler-title>>
	>
		<<tm-edit-tiddler>>
	</$let>
	<!-- Navigate to the draft-->
	<$let
		event-paramObject-var-currentTiddler=<<createTiddler-draftTitle>>
	>
		<<tm-navigate>>
	</$let>
</$action-createtiddler>
\end tm-new-tiddler

\define tm-close-tiddler()
<!--

Closes all tiddlers with the specified currentTiddler variable

storyConfigurationTiddler: title of tiddler containing story configuration
event-tiddlerTitle: title of tiddler that is to be closed

-->
<$let
	event-paramObject-tiddlerTitle={{{ [<event-tiddlerTitle>!is[blank]else<event-paramObject-tiddlerTitle>] }}}
>
<$action-log message="In classic tm-close-tiddler"/>
<$action-log/>
	<$list filter="[<storyConfigurationTiddler>get[@story-list]enlist-input[]] :filter[field:var-currentTiddler<event-paramObject-tiddlerTitle>]" variable="storyItemTiddler">
		<$action-log removing=<<storyItemTiddler>>/>
		<$set name="value" filter="[<storyConfigurationTiddler>get[@story-list]enlist-input[]] -[<storyItemTiddler>]">
			<$action-setfield $tiddler=<<storyConfigurationTiddler>> @story-list=<<value>>/>
		</$set>
	</$list>
</$let>
\end

\define tm-edit-tiddler()
<!--

Creates a new draft tiddler referencing the specified tiddler, and then finds all tiddlers with the specified currentTiddler variable, replacing currentTiddler with the draft, and setting the template to the edit template

storyConfigurationTiddler: title of tiddler containing story configuration
event-tiddlerTitle: title of tiddler that is to be edited

-->
<$let
	title={{{ [<event-tiddlerTitle>!is[blank]else<event-paramObject-tiddlerTitle>] }}}
>
<$action-log msg="In classic tm-edit-tiddler"/>
<$action-log/>
	<$wikify name="confirmation-message" text={{$:/language/ConfirmEditShadowTiddler}}>
		<$action-confirm $message=<<confirmation-message>> $prompt={{{ [<title>is[shadow]!is[tiddler]then[yes]else[no]] }}}>
			<$action-createtiddler $basetitle={{{ [<title>addprefix[Draft of ']addsuffix[']] }}} $template=<<title>> draft.of=<<title>> draft.title=<<title>>>
				<$list filter="[<storyConfigurationTiddler>get[@story-list]enlist-input[]] :filter[field:var-currentTiddler<title>]" variable="storyItemTiddler">
					<$action-setfield $tiddler=<<storyItemTiddler>> var-currentTiddler=<<createTiddler-title>>/>
					<!-- POSSIBLY SHOULD NAVIGATE TO THE TIDDLER AS WELL HERE -->
				</$list>
			</$action-createtiddler>
		</$action-confirm>
	</$wikify>
</$let>
\end

\define tm-save-tiddler()
<!--

* If the tiddler has been renamed and the target tiddler already exists then issue a confirmation prompt
* Save the draft over the original tiddler
* Optionally, relink references to the original tiddler to the new title
* Delete the draft
* If it is a rename, then also delete the original tiddler
* Replace the draft in the story river with the new tiddler
* Finally, trigger an autosave.

storyConfigurationTiddler: title of tiddler containing story configuration
event-tiddlerTitle: title of tiddler that is to be edited

-->
<$let
	draftTitle={{{ [<event-tiddlerTitle>!is[blank]else<event-paramObject-tiddlerTitle>] }}}
	title={{{ [<draftTitle>get[draft.title]] }}}
	originalTitle={{{ [<draftTitle>get[draft.of]] }}}
	isRename={{{ [<title>match<originalTitle>then[no]else[yes]] }}}
>
<$action-log msg="In classic tm-save-tiddler"/>
<$action-log/>
	<$wikify name="confirmation-message" text={{$:/language/ConfirmOverwriteTiddler}}>
		<$action-confirm $message=<<confirmation-message>> $prompt={{{ [<title>!is[tiddler]then[no]] [<isRename>match[no]] ~[[yes]] }}}>
			<$action-setmultiplefields $tiddler=<<title>> $fields="[<draftTitle>fields[]sort[]] -title -draft.of -draft.title" $values="[<draftTitle>fields[]sort[]] -title -draft.of -draft.title :map[<draftTitle>get<currentTiddler>]"/>
			<$action-setfield $tiddler=<<title>> $timestamp="yes"/>
			<$list filter="[{$:/config/RelinkOnRename}match[yes]]" variable="ignore">
				<$action-sendmessage $message="tm-relink-tiddler" from=<<originalTitle>> to=<<title>>/>
			</$list>
			<$action-deletetiddler $tiddler=<<draftTitle>>/>
			<$list filter="[<isRename>match[yes]]" variable="ignore">
				<$action-deletetiddler $tiddler=<<originalTitle>>/>
			</$list>
			<$list filter="[<storyConfigurationTiddler>get[@story-list]enlist-input[]] :filter[field:var-currentTiddler<draftTitle>]" variable="storyItemTiddler">
				<$action-setfield $tiddler=<<storyItemTiddler>> var-currentTiddler=<<title>>/>
				<!-- POSSIBLY SHOULD NAVIGATE TO THE TIDDLER AS WELL HERE -->
			</$list>
		</$action-confirm>
	</$wikify>
</$let>
\end

\define tm-cancel-tiddler()
<!--

If the tiddler has changed, show a confirmation prompt. If confirmed, delete the draft tiddler and replace it in the story with the original tiddler, and then navigate to it

storyConfigurationTiddler: title of tiddler containing story configuration
event-tiddlerTitle: title of tiddler that is to be cancelled

-->
<$let
	title={{{ [<event-tiddlerTitle>!is[blank]else<event-paramObject-tiddlerTitle>] }}}
	originalTitle={{{ [<title>get[draft.of]] }}}
>
<$action-log msg="In classic tm-cancel-tiddler" storyConfigurationTiddler=<<storyConfigurationTiddler>>/>
<$action-log/>
	<$wikify name="confirmation-message" text={{$:/language/ConfirmCancelTiddler}}>
		<$action-confirm $message=<<confirmation-message>> $prompt={{{ [<title>] :filter[{!!draft.title}!match{!!draft.of}then[yes]] :else[<title>matchtiddler:title,modified,created,draft.of,draft.title<originalTitle>then[no]else[yes]] }}}>
			<$action-deletetiddler $tiddler=<<title>>/>
			<$list filter="[<storyConfigurationTiddler>get[@story-list]enlist-input[]] :filter[field:var-currentTiddler<title>]" variable="storyItemTiddler">
				<$action-setfield $tiddler=<<storyItemTiddler>> var-currentTiddler=<<originalTitle>>/>
				<!-- POSSIBLY SHOULD NAVIGATE TO THE TIDDLER AS WELL HERE -->
			</$list>
		</$action-confirm>
	</$wikify>
</$let>
\end

\define tm-fold-tiddler()
<!--

Folds a tiddler

event-paramObject-foldedState: optional title of associated state tiddler

-->
<$let
	folded-state=<<event-paramObject-foldedState>>
>
<$action-log message="In classic tm-fold-tiddler"/>
<$action-log/>
<$action-setfield $tiddler=<<folded-state>> $value={{{ [<folded-state>get[text]else[show]match[show]then[hide]else[show]] }}}/>
</$let>
\end

\define init-actions()
<!--

Initialise the story

storyConfigurationTiddler: title of tiddler containing story configuration

-->
<$action-setfield $tiddler=<<storyConfigurationTiddler>> @story-list=""/>
<$action-setfield $tiddler=<<storyConfigurationTiddler>> @history-list=""/>
<$list filter="[<storyConfigurationTiddler>has[@default-tiddlers]]" variable="ignore">
	<$list filter={{{ [<storyConfigurationTiddler>get[@default-tiddlers]] }}} variable="event-paramObject-var-currentTiddler">
		<$let
			event-paramObject-var-anchor=""
		>
			<$$invoke instanceTitle=<<storyConfigurationTiddler>> methodName="tm-navigate"/>
		</$let>
	</$list>
</$list>
\end

\define story-river-content()
\whitespace trim
<div class="river-inner">
	<section class="story-backdrop">
		<$list filter="[all[shadows+tiddlers]tag[$:/tags/AboveStory]!has[draft.of]]">
			<$transclude/>
		</$list>
	</section>
	<$historytracker history={{{ [<storyConfigurationTiddler>get[@history-list]enlist-input[]last[]] }}} tag="div">
		<$list filter="[<storyConfigurationTiddler>get[@story-list]enlist-input[]]" emptyMessage={{$:/config/EmptyStoryMessage}}>
			<div>
				<$let storyItemTiddler=<<currentTiddler>> storyTiddler={{{ [<currentTiddler>get[var-currentTiddler]] }}}>
					<$tiddler tiddler=<<storyTiddler>>>
						<$transclude tiddler="$:/core/ui/StoryTiddlerTemplate"/>
					</$tiddler>
				</$let>
			</div>
		</$list>
	</$historytracker>
	<section class="story-frontdrop">
		<$list filter="[all[shadows+tiddlers]tag[$:/tags/BelowStory]!has[draft.of]]">
			<$transclude/>
		</$list>
	</section>
</div>
\end
