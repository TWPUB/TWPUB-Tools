title: $:/core/ui/MultiNavigator
tags: $:/tags/Macro

<!--
Define the $$multinavigator widget.

It manages story rivers widgets that it contains by handling and dispatching messages, including handling navigation popup.

-->

\define tv-action-refresh-policy() always

<!--
Generic message handler that just passes messages onto the appropriate story river
-->
\procedure generic-message-handler()
<!-- Compute the story configuration tiddler -->
<$let
	storyConfigurationTiddler={{{ [<event-paramObject-storyConfigurationTiddler>!is[blank]] ~[all[shadows+tiddlers]tag[$:/tags/Story]] }}}
	storyDefinitionTiddler={{{ [<storyConfigurationTiddler>get[story-definition]] }}}
>
	<$action-log message="In navigator generic-message-handler"/>
	<$action-log/>
	<!-- Import the procedures from the story definition tiddler -->
	<$importvariables filter={{{ [<storyDefinitionTiddler>get[imports]] }}}>
		<$importvariables filter=<<storyDefinitionTiddler>>>
			<!-- Invoke the story river message handler-->
			<$transclude tiddler=<<storyDefinitionTiddler>> field=<<event-type>>/>
		</$importvariables>
	</$importvariables>
</$let>
\end

<!--
Function to get a message parameter, first looking on the event object and then on the paramObject
-->
\function getMessageParam(name)
[<name>addprefix[event-]is[variable]getvariable[]!is[blank]] :else[<name>addprefix[event-paramObject-]is[variable]getvariable[]!is[blank]]
\end

<!--
Function to pack four coordinates into "(x,y,w,h)" string
-->
\function makeRectangle(x,y,w,h)
=[[(]] =[<x>addprefix[event-paramObject-]getvariable[]] =[[,]] =[<y>addprefix[event-paramObject-]getvariable[]] =[[,]] =[<w>addprefix[event-paramObject-]getvariable[]] =[[,]] =[<h>addprefix[event-paramObject-]getvariable[]] =[[)]] +[join[]]
\end

<!--
Traps navigate events within the story river
-->
\procedure tm-navigate-handler()
<$let
	event-paramObject-shiftKey=<<getMessageParam shiftKey>> 
	event-paramObject-altKey=<<getMessageParam altKey>> 
	event-paramObject-var-currentTiddler=<<getMessageParam navigateTo>>
	defaultStoryConfigurationTiddler={{{ [<event-paramObject-var-currentTiddler>]  :cascade[all[shadows+tiddlers]tag[$:/tags/DefaultStoryFilter]get[text]] }}}
	storyConfigurationTiddler={{{ [<event-paramObject-storyConfigurationTiddler>!is[blank]] ~[<defaultStoryConfigurationTiddler>] }}}
	event-paramObject-navigateFromClientLeft=<<getMessageParam navigateFromClientLeft>>
	event-paramObject-navigateFromClientTop=<<getMessageParam navigateFromClientTop>>
	event-paramObject-navigateFromClientWidth=<<getMessageParam navigateFromClientWidth>>
	event-paramObject-navigateFromClientHeight=<<getMessageParam navigateFromClientHeight>>
	storyDefinitionTiddler={{{ [<storyConfigurationTiddler>get[story-definition]] }}}
>
	<$action-log message="In tm-navigate-handler"/>
	<$action-log/>
	<!-- If the shift key is not pressed, pass the navigation onto the current story river -->
	<$list filter="[<event-paramObject-shiftKey>!match[true]]" variable="ignore">
		<$importvariables filter={{{ [<storyDefinitionTiddler>get[imports]] }}}>
			<$importvariables filter=<<storyDefinitionTiddler>>>
				<$transclude tiddler=<<storyDefinitionTiddler>> field=<<event-type>>/>
			</$importvariables>
		</$importvariables>
	</$list>
	<!-- If the shift key is pressed, save all the context information and display the navigation popup -->
	<$list filter="[<event-paramObject-shiftKey>match[true]]" variable="ignore">
		<$action-setmultiplefields $tiddler={{{ [[$:/state/navigation-popup/]addsuffix<storyConfigurationTiddler>] }}} $fields="[variables[]removeprefix[event-paramObject-]addprefix[var-]]" $values="[variables[]prefix[event-paramObject-]getvariable[]]"/>
		<$action-popup $state={{{ [[$:/state/navigation-popup/]addsuffix<storyConfigurationTiddler>] }}} $coords=<<makeRectangle navigateFromClientLeft navigateFromClientTop navigateFromClientWidth navigateFromClientHeight>>/>
		<$action-log $state={{{ [[$:/state/navigation-popup/]addsuffix<storyConfigurationTiddler>] }}} $coords=<<makeRectangle navigateFromClientLeft navigateFromClientTop navigateFromClientWidth navigateFromClientHeight>>
	</$list>
</$let>
\end

<!--
Handles clicks within the navigation popup menu
-->
\procedure navigation-popup-actions()
<$vars storyConfigurationTiddler=<<currentTiddler>>>
	<$vars storyDefinitionTiddler={{{ [<storyConfigurationTiddler>get[story-definition]] }}}>
		<$importvariables filter={{{ [<storyDefinitionTiddler>get[imports]] }}}>
			<$importvariables filter=<<storyDefinitionTiddler>>>
				<$transclude tiddler=<<storyDefinitionTiddler>> field="tm-navigate"/>
			</$importvariables>
		</$importvariables>
	</$vars>
</$vars>
\end

<!--
Renders the navigation popup menu
-->
\procedure navigation-popup()
<$vars stateTitle={{{ [[$:/state/navigation-popup/]addsuffix<storyConfigurationTiddler>] }}}>
	<$setmultiplevariables $names="[<stateTitle>fields[]removeprefix[var-]addprefix[event-paramObject-]]" $values="[<stateTitle>fields[]prefix[var-]]  :map[<stateTitle>get<currentTiddler>]">
		<$reveal state=<<stateTitle>> type="popup" tag="div" class="tc-link-popup" position="below" updatePopupPosition="yes" animate="yes">
			<div class="tc-drop-down">
				Navigating to:<$text text=<<event-paramObject-var-currentTiddler>>/>
				<$list filter="[all[shadows+tiddlers]tag[$:/tags/Story]sort[caption]]">
					<$button class="tc-btn-invisible" actions=<<navigation-popup-actions>>>
						<$text text={{!!caption}}/>
					</$button>
				</$list>
				<hr>
				<div style="border:1px solid black;padding: 1em;max-width: 300px;max-height: 300px;overflow:auto;">
					<$transclude tiddler=<<event-paramObject-var-currentTiddler>> mode="block"/>
				</div>
			</div>
		</$reveal>
	</$setmultiplevariables>
</$vars>
\end

<!--
multinavigator widget is used instead of the core `<$navigator>` widget but is not currently intended to be backwards compatible with it.
-->
\widget $$multinavigator()
<$let tv-action-refresh-policy="once">
	<$messagecatcher
		$tm-navigate=<<tm-navigate-handler>>
		$tm-close-tiddler=<<generic-message-handler>>
		$tm-edit-tiddler=<<generic-message-handler>>
		$tm-save-tiddler=<<generic-message-handler>>
		$tm-cancel-tiddler=<<generic-message-handler>>
		$tm-save-tiddler=<<generic-message-handler>>
	>
		<$slot $name="ts-body"/>
	</$messagecatcher>
</$let>
\end
