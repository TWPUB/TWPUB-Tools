title: $:/global/$$multinavigator
_is_widget: yes
code-body: yes

<!--
Define the $$multinavigator widget.

It handles tm-navigate and other storyriver-related messages by either dispatching the message to
the appropriate storyriver or by displaying a popup for the user to choose the target storyriver.
-->

\define tv-action-refresh-policy() always

<!--
Generic message handler that just passes messages onto the appropriate story river
-->
\procedure generic-message-handler()
<!-- Compute the story configuration tiddler -->
<$let
	storyConfigurationTiddler={{{ [<event-paramObject-storyConfigurationTiddler>!is[blank]] ~[all[shadows+tiddlers]tag[$:/tags/Story]] }}}
>
	<$action-log message="In navigator generic-message-handler"/>
	<$action-log/>
	<!-- Invoke that method on the storyriver -->
	<$$invoke instanceTitle=<<storyConfigurationTiddler>> methodName=<<event-type>>/>
</$let>
\end

<!--
Traps navigate events within the story river
-->
\procedure tm-navigate-handler()
<$let
	event-paramObject-shiftKey=<<.getMessageParam shiftKey>> 
	event-paramObject-altKey=<<.getMessageParam altKey>> 
	event-paramObject-var-currentTiddler=<<.getMessageParam navigateTo>>
	defaultStoryConfigurationTiddler={{{ [<event-paramObject-var-currentTiddler>]  :cascade[all[shadows+tiddlers]tag[$:/tags/DefaultStoryFilter]get[text]] }}}
	storyConfigurationTiddler={{{ [<event-paramObject-storyConfigurationTiddler>!is[blank]] ~[<defaultStoryConfigurationTiddler>] }}}
	event-paramObject-navigateFromClientLeft=<<.getMessageParam navigateFromClientLeft>>
	event-paramObject-navigateFromClientTop=<<.getMessageParam navigateFromClientTop>>
	event-paramObject-navigateFromClientWidth=<<.getMessageParam navigateFromClientWidth>>
	event-paramObject-navigateFromClientHeight=<<.getMessageParam navigateFromClientHeight>>
>
	<$action-log message="In tm-navigate-handler"/>
	<$action-log/>
	<!-- If the shift key is not pressed, pass the navigation onto the current story river -->
	<$list filter="[<event-paramObject-shiftKey>!match[true]]" variable="ignore">
		<$$invoke instanceTitle=<<storyConfigurationTiddler>> methodName=<<event-type>>/>
	</$list>
	<!-- If the shift key is pressed, save all the context information and display the navigation popup -->
	<$list filter="[<event-paramObject-shiftKey>match[true]]" variable="ignore">
		<$let stateNavigationPopup={{{ [[$:/state/navigation-popup/]addsuffix<storyConfigurationTiddler>] }}}>
			<$action-setmultiplefields
				$tiddler=<<stateNavigationPopup>>
				$fields="[variables[]removeprefix[event-paramObject-]addprefix[var-]]"
				$values="[variables[]prefix[event-paramObject-]getvariable[]]"
			/>
			<$action-popup
				$state=<<stateNavigationPopup>>
				$coords=<<.makeRectangle navigateFromClientLeft navigateFromClientTop navigateFromClientWidth navigateFromClientHeight>>
			/>
			<$action-log
				$state=<<stateNavigationPopup>>
				$coords=<<.makeRectangle navigateFromClientLeft navigateFromClientTop navigateFromClientWidth navigateFromClientHeight>>
			/>
		</$let>
	</$list>
</$let>
\end

<$let tv-action-refresh-policy="once">
	<$messagecatcher
		$tm-navigate=<<tm-navigate-handler>>
		$tm-close-tiddler=<<generic-message-handler>>
		$tm-edit-tiddler=<<generic-message-handler>>
		$tm-save-tiddler=<<generic-message-handler>>
		$tm-cancel-tiddler=<<generic-message-handler>>
		$tm-save-tiddler=<<generic-message-handler>>
		$tm-fold-tiddler=<<generic-message-handler>>
	>
		<$slot $name="ts-raw"/>
	</$messagecatcher>
</$let>
