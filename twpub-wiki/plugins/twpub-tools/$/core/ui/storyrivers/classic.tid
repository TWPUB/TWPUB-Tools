caption: Classic Story River
class: river
init-actions: <<init-actions>>
title: $:/core/ui/storyrivers/classic
tm-close-tiddler: <<close-tiddler-actions>>
tm-edit-tiddler: <<edit-tiddler-actions>>
tm-navigate: <<navigate-actions>>
tags: $:/tags/StoryRiverDefinition
edit-template: $:/core/ui/storyrivers/classic-edit

\define tv-action-refresh-policy() always

\define navigate-actions()
<!--

Navigate to a tiddler

storyConfigurationTiddler: title of tiddler containing story configuration
event-paramObject-var-currentTiddler: title of tiddler that is target of navigation
event-navigateTo: alias for event-paramObject-var-currentTiddler for backwards compatibility
event-paramObject-* other optional variables to be provided to the story entry

-->
<$action-log message="In classic navigate-actions"/>
<$action-log/>
<$vars
	event-paramObject-var-currentTiddler={{{ [<event-navigateTo>!is[blank]else<event-paramObject-var-currentTiddler>] }}}
	storyListTitle={{{ [<storyConfigurationTiddler>get[list-tiddler]] }}}
	historyListTitle={{{ [<storyConfigurationTiddler>get[history-tiddler]] }}}
>
	<$action-createtiddler $basetitle={{{ [[$:/state/storyitem/]addsuffix<storyListTitle>] }}}>
		<$action-setmultiplefields $tiddler=<<createTiddler-title>> $fields="[variables[]prefix[event-paramObject-var-]removeprefix[event-paramObject-var-]addprefix[var-]]" $values="[variables[]prefix[event-paramObject-var-]getvariable[]]"/>
		<$set name="value" filter="[list<historyListTitle>] =[<createTiddler-title>]">
			<$action-setfield $tiddler=<<historyListTitle>> list=<<value>>/>
		</$set>
		<$vars storyPosition={{{ [list<storyListTitle>] :filter[matchtiddler<createTiddler-title>] }}}>
			<$list filter="[<storyPosition>match[]]" variable="ignore">
				<$set name="value" filter="[list<storyListTitle>] [<createTiddler-title>]">
					<$action-setfield $tiddler=<<storyListTitle>> list=<<value>>/>
				</$set>
			</$list>
			<$list filter="[<storyPosition>!match[]]" variable="ignore">
				<$set name="value" filter="[list<storyListTitle>] [<createTiddler-title>] +[replace<storyPosition>]">
					<$action-setfield $tiddler=<<storyListTitle>> list=<<value>>/>
				</$set>
			</$list>
		</$vars>
	</$action-createtiddler>
</$vars>
\end

\define close-tiddler-actions()
<!--

Closes all tiddlers with the specified currentTiddler variable

storyConfigurationTiddler: title of tiddler containing story configuration
event-tiddlerTitle: title of tiddler that is to be closed

-->
<$vars
	storyListTitle={{{ [<storyConfigurationTiddler>get[list-tiddler]] }}}
	historyListTitle={{{ [<storyConfigurationTiddler>get[history-tiddler]] }}}
	event-paramObject-tiddlerTitle={{{ [<event-tiddlerTitle>!is[blank]else<event-paramObject-tiddlerTitle>] }}}
>
<$action-log message="In classic close-tiddler-actions"/>
<$action-log/>
	<$list filter="[list<storyListTitle>] :filter[field:var-currentTiddler<event-paramObject-tiddlerTitle>]" variable="storyItemTiddler">
		<$action-log removing=<<storyItemTiddler>>/>
		<$set name="value" filter="[list<storyListTitle>] -[<storyItemTiddler>]">
			<$action-setfield $tiddler=<<storyListTitle>> list=<<value>>/>
		</$set>
	</$list>
</$vars>
\end

\define edit-tiddler-actions()
<!--

Creates a new draft tiddler referencing the specified tiddler, and then finds all tiddlers with the specified currentTiddler variable, replacing currentTiddler with the draft, and setting the template to the edit template

storyConfigurationTiddler: title of tiddler containing story configuration
event-tiddlerTitle: title of tiddler that is to be edited

-->
<$vars
	storyListTitle={{{ [<storyConfigurationTiddler>get[list-tiddler]] }}}
	historyListTitle={{{ [<storyConfigurationTiddler>get[history-tiddler]] }}}
	title={{{ [<event-tiddlerTitle>!is[blank]else<event-paramObject-tiddlerTitle>] }}}
>
<$action-log msg="In classic edit-tiddler-actions"/>
<$action-log/>
	<$wikify name="confirmation-message" text={{$:/language/ConfirmEditShadowTiddler}}>
		<$action-confirm $message=<<confirmation-message>> $prompt={{{ [<title>is[shadow]!is[tiddler]then[yes]else[no]] }}}>
			<$action-createtiddler $basetitle={{{ [<title>addprefix[Draft of ']addsuffix[']] }}} $template=<<title>> draft.of=<<title>> draft.title=<<title>>>
				<$list filter="[list<storyListTitle>] :filter[field:var-currentTiddler<title>]" variable="storyItemTiddler">
					<$action-setfield $tiddler=<<storyItemTiddler>> var-currentTiddler=<<createTiddler-title>>/>
					<!-- POSSIBLY SHOULD NAVIGATE TO THE TIDDLER AS WELL HERE -->
				</$list>
			</$action-createtiddler>
		</$action-confirm>
	</$wikify>
</$vars>
\end

\define init-actions()
<!--

Initialise the story

storyConfigurationTiddler: title of tiddler containing story configuration
initFilter: filter identifying initial tiddlers to navigate to

-->
<$vars storyListTitle={{{ [<storyConfigurationTiddler>get[list-tiddler]] }}} historyListTitle={{{ [<storyConfigurationTiddler>get[history-tiddler]] }}}>
	<$action-setfield $tiddler=<<storyListTitle>> list=""/>
	<$action-setfield $tiddler=<<historyListTitle>> list=""/>
	<$list filter=<<initFilter>> variable="event-paramObject-var-currentTiddler">
		<<navigate-actions>>
	</$list>
</$vars>
\end

\define story-river-content()
\whitespace trim
<div class="river-inner">
	<$list filter="[list<storyListTitle>]" storyview={{$:/view}} emptyMessage={{$:/config/EmptyStoryMessage}}>
		<$vars storyItemTiddler=<<currentTiddler>> storyTiddler={{{ [<currentTiddler>get[var-currentTiddler]] }}}>
			<$tiddler tiddler=<<storyTiddler>>>
				<$transclude tiddler="$:/core/ui/StoryTiddlerTemplate"/>
			</$tiddler>
		</$vars>
	</$list>
</div>
\end
