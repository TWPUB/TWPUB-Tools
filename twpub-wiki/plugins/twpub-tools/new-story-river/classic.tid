title: $:/core/ui/storyrivers/classic
caption: Classic Story River
tm-navigate: <<navigate-actions>>
tm-close-tiddler: <<close-tiddler-actions>>
tm-edit-tiddler: <<edit-tiddler-actions>>
init-actions: <<init-actions>>

\define tv-action-refresh-policy() always

\define navigate-actions()
<!--

Navigate to a tiddler

storyConfigurationTiddler: title of tiddler containing story configuration
event-paramObject-currentTiddler: title of tiddler that is target of navigation
event-navigateTo: alias for event-paramObject-currentTiddler for backwards compatibility
event-paramObject-template: template to be used
event-paramObject-* other optional variables to be provided to the story entry

-->
<$action-log message="In classic navigate-actions" event-paramObject-template=<<event-paramObject-template>>/>
<$action-log/>
<$vars
    event-paramObject-currentTiddler={{{ [<event-navigateTo>!is[blank]else<event-paramObject-currentTiddler>] }}}
    storyListTitle={{{ [<storyConfigurationTiddler>get[list-tiddler]] }}}
    historyListTitle={{{ [<storyConfigurationTiddler>get[history-tiddler]] }}}
>
    <$action-createtiddler $basetitle={{{ [[$:/state/storyitem/]addsuffix<storyListTitle>] }}} var-template=<<event-paramObject-template>>>
        <$action-setmultiplefields $tiddler=<<createTiddler-title>> $fields="[variables[]prefix[event-paramObject-]removeprefix[event-paramObject-]addprefix[var-]]" $values="[variables[]prefix[event-paramObject-]getvariable[]]"/>
        <$set name="value" filter="[list<historyListTitle>] =[<createTiddler-title>]">
            <$action-setfield $tiddler=<<historyListTitle>> list=<<value>>/>
        </$set>
        <$vars storyPosition={{{ [list<storyListTitle>] :filter[matchtiddler<createTiddler-title>] }}}>
            <$list filter="[<storyPosition>match[]]" variable="ignore">
                <$set name="value" filter="[list<storyListTitle>] [<createTiddler-title>]">
                    <$action-setfield $tiddler=<<storyListTitle>> list=<<value>>/>
                </$set>
            </$list>
            <$list filter="[<storyPosition>!match[]]" variable="ignore">
                <$set name="value" filter="[list<storyListTitle>] [<createTiddler-title>] +[replace<storyPosition>]">
                    <$action-setfield $tiddler=<<storyListTitle>> list=<<value>>/>
                </$set>
            </$list>
        </$vars>
    </$action-createtiddler>
</$vars>
\end

\define close-tiddler-actions()
<!--

Closes all tiddlers with the specified currentTiddler variable

storyConfigurationTiddler: title of tiddler containing story configuration
event-tiddlerTitle: title of tiddler that is to be closed

-->
<$vars
    storyListTitle={{{ [<storyConfigurationTiddler>get[list-tiddler]] }}}
    historyListTitle={{{ [<storyConfigurationTiddler>get[history-tiddler]] }}}
>
    <$list filter="[list<storyListTitle>] :filter[field:var-currentTiddler<event-tiddlerTitle>]" variable="storyItemTiddler">
        <$action-log removing=<<storyItemTiddler>>/>
        <$set name="value" filter="[list<storyListTitle>] -[<storyItemTiddler>]">
            <$action-setfield $tiddler=<<storyListTitle>> list=<<value>>/>
        </$set>
    </$list>
</$vars>
\end

\define edit-tiddler-actions()
<!--

Creates a new draft tiddler referencing the specified tiddler, and then finds all tiddlers with the specified currentTiddler variable, replacing currentTiddler with the draft, and setting the template to the edit template

storyConfigurationTiddler: title of tiddler containing story configuration
event-tiddlerTitle: title of tiddler that is to be edited

-->
<$vars
    storyListTitle={{{ [<storyConfigurationTiddler>get[list-tiddler]] }}}
    historyListTitle={{{ [<storyConfigurationTiddler>get[history-tiddler]] }}}
    title=<<event-tiddlerTitle>>
>
    <$wikify name="confirmation-message" text={{$:/language/ConfirmEditShadowTiddler}}>
        <$action-confirm $message=<<confirmation-message>> $prompt={{{ [<event-tiddlerTitle>is[shadow]!is[tiddler]then[yes]else[no]] }}}>
            <$action-createtiddler $basetitle={{{ [<event-tiddlerTitle>addprefix[Draft of ']addsuffix[']] }}} $template=<<event-tiddlerTitle>> draft.of=<<event-tiddlerTitle>> draft.title=<<event-tiddlerTitle>>>
                <$list filter="[list<storyListTitle>] :filter[field:var-currentTiddler<event-tiddlerTitle>]" variable="storyItemTiddler">
                    <$action-setfield $tiddler=<<storyItemTiddler>> var-currentTiddler=<<createTiddler-title>> var-template="$:/core/ui/EditTemplate"/>
                    <!-- POSSIBLY SHOULD NAVIGATE TO THE TIDDLER AS WELL HERE -->
                </$list>
            </$action-createtiddler>
        </$action-confirm>
    </$wikify>
</$vars>
\end

\define init-actions()
<!--

Initialise the story

storyConfigurationTiddler: title of tiddler containing story configuration
initFilter: filter identifying initial tiddlers to navigate to

-->
<$vars storyListTitle={{{ [<storyConfigurationTiddler>get[list-tiddler]] }}} historyListTitle={{{ [<storyConfigurationTiddler>get[history-tiddler]] }}}>
    <$action-setfield $tiddler=<<storyListTitle>> list=""/>
    <$action-setfield $tiddler=<<historyListTitle>> list=""/>
    <$list filter=<<initFilter>> variable="event-paramObject-currentTiddler">
        <<navigate-actions>>
    </$list>
</$vars>
\end

\define story-river-content()
\whitespace trim
<$list filter="[list<storyListTitle>]" storyview={{$:/view}} emptyMessage={{$:/config/EmptyStoryMessage}}>
    <$vars storyTiddler={{{ [<currentTiddler>get[var-currentTiddler]] }}} templateTiddler={{{ [<currentTiddler>get[var-template]else[$:/core/ui/ViewTemplate]] }}}>
        <$setmultiplevariables $names="[<currentTiddler>fields[]removeprefix[var-]]" $values="[<currentTiddler>fields[]prefix[var-]getfield<currentTiddler>]">
            <$tiddler tiddler=<<storyTiddler>>>
                <$transclude tiddler=<<templateTiddler>>/>
            </$tiddler>
        </$setmultiplevariables>
    </$vars>
</$list>
\end
